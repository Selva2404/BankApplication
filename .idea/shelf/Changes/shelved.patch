Index: cardservice/src/main/resources/application_prod.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cardservice/src/main/resources/application_prod.yml b/cardservice/src/main/resources/application_prod.yml
new file mode 100644
--- /dev/null	(date 1753982704835)
+++ b/cardservice/src/main/resources/application_prod.yml	(date 1753982704835)
@@ -0,0 +1,16 @@
+spring:
+  config:
+    activate:
+      on-profile: "prod"
+
+build:
+  version: "2.0.1"
+
+service:
+  name: srini-prod
+  contact:
+    mail-id: srini@gmail.com
+    cabin: A88
+  OnCall:
+    - 876543456
+    - 876567865
\ No newline at end of file
Index: cardservice/src/main/resources/application_qa.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cardservice/src/main/resources/application_qa.yml b/cardservice/src/main/resources/application_qa.yml
new file mode 100644
--- /dev/null	(date 1753982704842)
+++ b/cardservice/src/main/resources/application_qa.yml	(date 1753982704842)
@@ -0,0 +1,16 @@
+spring:
+  config:
+    activate:
+      on-profile: "qa"
+
+build:
+  version: "2.0.2"
+
+service:
+  name: karthikswami-apm
+  contact:
+    mail-id: karthikswami@gmail.com
+    cabin: A55
+  OnCall:
+    - 987654456
+    - 987656789
\ No newline at end of file
Index: AccountService/src/main/java/org/bankapp/Controller/AccountController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.bankapp.Controller;\n\n\nimport jakarta.validation.Valid;\nimport lombok.AllArgsConstructor;\nimport org.bankapp.DTO.CustomerDTO;\nimport org.bankapp.DTO.ResponseDTO;\nimport org.bankapp.constant.Constant;\nimport org.bankapp.service.iAccountService;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\n\n@RestController\n@RequestMapping(value=\"/api\",produces = MediaType.APPLICATION_JSON_VALUE)\n@AllArgsConstructor\npublic class AccountController {\n\n    iAccountService iaccountService;\n    @PostMapping(\"/Create\")\n    public ResponseEntity<ResponseDTO> createAccount(@RequestBody @Valid CustomerDTO customerDTO){\n        iaccountService.CreateAccount(customerDTO);\n        return ResponseEntity.status(HttpStatus.CREATED).body(new ResponseDTO(Constant.STATUS_201,Constant.message_201));\n    }\n\n    @GetMapping(\"/fetchAccount\")\n    public ResponseEntity<CustomerDTO> fetchAccount(@RequestParam String mobileNumber){\n        CustomerDTO customerDTO=iaccountService.fetchAccount(mobileNumber);\n        return ResponseEntity.status(HttpStatus.OK).body(customerDTO);\n    }\n\n    @PutMapping(\"/updateAccount\")\n    public ResponseEntity<ResponseDTO> updateAccount(@RequestBody @Valid CustomerDTO customerDTO){\n        boolean status=iaccountService.updateAccountDetails(customerDTO);\n        if(status) {\n            return ResponseEntity.status(HttpStatus.OK).body(new ResponseDTO(\"200\", Constant.message_201));\n        }else{\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new ResponseDTO(\"500\", \"internal server error\"));\n        }\n    }\n    @DeleteMapping(\"/RemoveAccount\")\n    public ResponseEntity<ResponseDTO> removeAccount(@RequestParam String mobileNumber){\n        iaccountService.removeAccount(mobileNumber);\n        return ResponseEntity.status(HttpStatus.OK).body(new ResponseDTO(\"200\", Constant.message_201));\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AccountService/src/main/java/org/bankapp/Controller/AccountController.java b/AccountService/src/main/java/org/bankapp/Controller/AccountController.java
--- a/AccountService/src/main/java/org/bankapp/Controller/AccountController.java	(revision 26d94f93cc57ebb65e3efdfaf8dc1d09a6eccf04)
+++ b/AccountService/src/main/java/org/bankapp/Controller/AccountController.java	(date 1753802479481)
@@ -1,12 +1,21 @@
 package org.bankapp.Controller;
 
 
+import io.swagger.v3.oas.annotations.Operation;
+import io.swagger.v3.oas.annotations.media.Content;
+import io.swagger.v3.oas.annotations.media.Schema;
+import io.swagger.v3.oas.annotations.responses.ApiResponse;
+import io.swagger.v3.oas.annotations.responses.ApiResponses;
+import io.swagger.v3.oas.annotations.tags.Tag;
 import jakarta.validation.Valid;
-import lombok.AllArgsConstructor;
+import org.bankapp.DTO.AccountDtDTO;
 import org.bankapp.DTO.CustomerDTO;
+import org.bankapp.DTO.ErrorResponseDTO;
 import org.bankapp.DTO.ResponseDTO;
 import org.bankapp.constant.Constant;
 import org.bankapp.service.iAccountService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
@@ -15,35 +24,111 @@
 
 @RestController
 @RequestMapping(value="/api",produces = MediaType.APPLICATION_JSON_VALUE)
-@AllArgsConstructor
+
+@Tag(
+        name = "CRUD Operations for Account REST API",
+        description = "in this controller used for create, update, retrieve and delete for the account details"
+)
 public class AccountController {
 
+    @Autowired
     iAccountService iaccountService;
+
+    @Value("${build.version}")
+    private String version;
+
+    AccountDtDTO accountDtDTO;
+
+    @Autowired
+    public AccountController(AccountDtDTO accountDtDTO) {
+        this.accountDtDTO = accountDtDTO;
+    }
+    @Operation(
+            summary = "Create Account details",
+            description = "REST API used to Create customer and Account details from DB"
+    )
+    @ApiResponse(
+            responseCode = "201",
+            description = " HTTP status create"
+    )
     @PostMapping("/Create")
     public ResponseEntity<ResponseDTO> createAccount(@RequestBody @Valid CustomerDTO customerDTO){
         iaccountService.CreateAccount(customerDTO);
         return ResponseEntity.status(HttpStatus.CREATED).body(new ResponseDTO(Constant.STATUS_201,Constant.message_201));
     }
+    @Operation(
+            summary = "fetch Account details",
+            description = "REST API used to fetch Account details from DB"
+    )
+    @ApiResponse(
+            responseCode = "200",
+            description = "HTTP status fetch"
+    )
 
     @GetMapping("/fetchAccount")
     public ResponseEntity<CustomerDTO> fetchAccount(@RequestParam String mobileNumber){
         CustomerDTO customerDTO=iaccountService.fetchAccount(mobileNumber);
         return ResponseEntity.status(HttpStatus.OK).body(customerDTO);
     }
-
+    @Operation(
+            summary = "Update Account details",
+            description = "REST API used to Update Account details from DB"
+    )
+    @ApiResponses({
+            @ApiResponse(
+                    responseCode = "200",
+                    description = "HTTP status update"
+            ),
+            @ApiResponse(
+                    responseCode = "500",
+                    description = "INTERNAL_SERVER_ERROR",
+                    content = @Content(
+                        schema = @Schema(implementation = ErrorResponseDTO.class)
+                    )
+            )
+        }
+    )
     @PutMapping("/updateAccount")
     public ResponseEntity<ResponseDTO> updateAccount(@RequestBody @Valid CustomerDTO customerDTO){
         boolean status=iaccountService.updateAccountDetails(customerDTO);
         if(status) {
-            return ResponseEntity.status(HttpStatus.OK).body(new ResponseDTO("200", Constant.message_201));
+            return ResponseEntity.status(HttpStatus.OK).body(new ResponseDTO("200", "account details updated successfully"));
         }else{
             return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new ResponseDTO("500", "internal server error"));
         }
     }
+    @Operation(
+            summary = "delete Account details",
+            description = "REST API used to delete Account details from DB"
+    )
+    @ApiResponse(
+            responseCode = "200",
+            description = "HTTP status delete"
+    )
     @DeleteMapping("/RemoveAccount")
     public ResponseEntity<ResponseDTO> removeAccount(@RequestParam String mobileNumber){
         iaccountService.removeAccount(mobileNumber);
         return ResponseEntity.status(HttpStatus.OK).body(new ResponseDTO("200", Constant.message_201));
     }
 
+    @Operation(
+            summary = "delete Account details",
+            description = "REST API used to delete Account details from DB"
+    )
+    @ApiResponse(
+            responseCode = "200",
+            description = "HTTP status delete"
+    )
+    @GetMapping("/Accounted")
+    public ResponseEntity<AccountDtDTO> getDBDetails(){
+        System.out.println(accountDtDTO);
+        return ResponseEntity.status(HttpStatus.OK).body(accountDtDTO);
+    }
+
+    @GetMapping("/buildVersion")
+    public ResponseEntity<String> getVersion(){
+
+        return ResponseEntity.status(HttpStatus.OK).body(version);
+    }
+
 }
Index: AccountService/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>3.5.3</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>Org.EasySchool</groupId>\n    <artifactId>BankApp</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>BankApp</name>\n    <description>BankApp</description>\n    <url/>\n    <licenses>\n        <license/>\n    </licenses>\n    <developers>\n        <developer/>\n    </developers>\n    <scm>\n        <connection/>\n        <developerConnection/>\n        <tag/>\n        <url/>\n    </scm>\n    <properties>\n        <java.version>17</java.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>com.h2database</groupId>\n            <artifactId>h2</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-validation</artifactId>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </path>\n                    </annotationProcessorPaths>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AccountService/pom.xml b/AccountService/pom.xml
--- a/AccountService/pom.xml	(revision 26d94f93cc57ebb65e3efdfaf8dc1d09a6eccf04)
+++ b/AccountService/pom.xml	(date 1753601761040)
@@ -9,10 +9,11 @@
         <relativePath/> <!-- lookup parent from repository -->
     </parent>
     <groupId>Org.EasySchool</groupId>
-    <artifactId>BankApp</artifactId>
+    <artifactId>AccountService</artifactId>
     <version>0.0.1-SNAPSHOT</version>
-    <name>BankApp</name>
-    <description>BankApp</description>
+    <name>AccountService</name>
+    <packaging>jar</packaging>
+    <description>AccountService</description>
     <url/>
     <licenses>
         <license/>
@@ -44,17 +45,18 @@
             <scope>runtime</scope>
             <optional>true</optional>
         </dependency>
+        <dependency>
+            <groupId>org.springdoc</groupId>
+            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
+            <version>2.8.9</version>
+        </dependency>
+
         <dependency>
             <groupId>com.h2database</groupId>
             <artifactId>h2</artifactId>
             <scope>runtime</scope>
         </dependency>
         <dependency>
-            <groupId>org.projectlombok</groupId>
-            <artifactId>lombok</artifactId>
-            <optional>true</optional>
-        </dependency>
-        <dependency>
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-starter-test</artifactId>
             <scope>test</scope>
@@ -70,26 +72,12 @@
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-compiler-plugin</artifactId>
-                <configuration>
-                    <annotationProcessorPaths>
-                        <path>
-                            <groupId>org.projectlombok</groupId>
-                            <artifactId>lombok</artifactId>
-                        </path>
-                    </annotationProcessorPaths>
-                </configuration>
+                <version>3.14.0</version>
             </plugin>
             <plugin>
                 <groupId>org.springframework.boot</groupId>
                 <artifactId>spring-boot-maven-plugin</artifactId>
-                <configuration>
-                    <excludes>
-                        <exclude>
-                            <groupId>org.projectlombok</groupId>
-                            <artifactId>lombok</artifactId>
-                        </exclude>
-                    </excludes>
-                </configuration>
+
             </plugin>
         </plugins>
     </build>
Index: AccountService/docker-compose.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AccountService/docker-compose.yml b/AccountService/docker-compose.yml
new file mode 100644
--- /dev/null	(date 1753716795233)
+++ b/AccountService/docker-compose.yml	(date 1753716795233)
@@ -0,0 +1,39 @@
+services:
+  account:
+    image: "selva2404/account:s1"
+    container_name: "account_ms"
+    ports:
+      - "8080:8080"
+    deploy:
+      resources:
+        limits:
+          memory: "1G"
+    networks:
+      - selva2404_network
+  loans:
+    image: "selva2404/loanservice:s1"
+    container_name: "loans_ms"
+    ports:
+      - "8100:8100"
+    deploy:
+      resources:
+        limits:
+          memory: "1G"
+    networks:
+      - selva2404_network
+
+  cards:
+    image: "selva2404/cardservice:s1"
+    container_name: "cards"
+    ports:
+      - "9000:9000"
+    deploy:
+      resources:
+        limits:
+          memory: "1G"
+    networks:
+      - selva2404_network
+networks:
+  selva2404_network:
+    driver: "bridge"
+
Index: AccountService/src/main/resources/application_prod.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AccountService/src/main/resources/application_prod.yml b/AccountService/src/main/resources/application_prod.yml
new file mode 100644
--- /dev/null	(date 1753982279979)
+++ b/AccountService/src/main/resources/application_prod.yml	(date 1753982279979)
@@ -0,0 +1,16 @@
+spring:
+  config:
+    activate:
+      on-profile: "prod"
+
+build:
+  version: "1.0.1"
+
+service:
+  name: karthik-prod
+  contact:
+    mail-id: karthik@gmail.com
+    cabin: A87
+  OnCall:
+    - 876543456
+    - 876567865
\ No newline at end of file
Index: AccountService/src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring:\n  application:\n    name=BankApp\n  datasource:\n    driver-class-name: org.h2.Driver\n    url: jdbc:h2:mem:testdb\n    username: sa\n    password: \"\"\n  jpa:\n    hibernate:\n      ddl-auto: update\n    database-platform: org.hibernate.dialect.H2Dialect\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AccountService/src/main/resources/application.yml b/AccountService/src/main/resources/application.yml
--- a/AccountService/src/main/resources/application.yml	(revision 26d94f93cc57ebb65e3efdfaf8dc1d09a6eccf04)
+++ b/AccountService/src/main/resources/application.yml	(date 1753982320302)
@@ -10,3 +10,22 @@
     hibernate:
       ddl-auto: update
     database-platform: org.hibernate.dialect.H2Dialect
+  config:
+    import:
+      - "application_qa.yml"
+      - "application_prod.yml"
+  profiles:
+      active: "qa"
+
+
+build:
+  version: "1.0.0"
+
+service:
+  name: selva-dev
+  contact:
+    mail-id: selva@gmail.com
+    cabin: A34
+  OnCall:
+    - 765434578
+    - 765434567
\ No newline at end of file
Index: cardservice/src/main/java/org/cardservice/DTO/CardsDtDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cardservice/src/main/java/org/cardservice/DTO/CardsDtDTO.java b/cardservice/src/main/java/org/cardservice/DTO/CardsDtDTO.java
new file mode 100644
--- /dev/null	(date 1753983026013)
+++ b/cardservice/src/main/java/org/cardservice/DTO/CardsDtDTO.java	(date 1753983026013)
@@ -0,0 +1,10 @@
+package org.cardservice.DTO;
+
+import org.springframework.boot.context.properties.ConfigurationProperties;
+import java.util.List;
+import java.util.Map;
+
+@ConfigurationProperties(prefix = "service")
+public record CardsDtDTO(String name, Map<String,String> contact, List<String> OnCall) {
+
+}
Index: AccountService/src/main/resources/application_qa.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AccountService/src/main/resources/application_qa.yml b/AccountService/src/main/resources/application_qa.yml
new file mode 100644
--- /dev/null	(date 1753982235913)
+++ b/AccountService/src/main/resources/application_qa.yml	(date 1753982235913)
@@ -0,0 +1,16 @@
+spring:
+  config:
+    activate:
+      on-profile: "qa"
+
+build:
+  version: "1.0.2"
+
+service:
+  name: bommu-apm
+  contact:
+    mail-id: bommu@gmail.com
+    cabin: A54
+  OnCall:
+    - 987654456
+    - 987656789
\ No newline at end of file
Index: cardservice/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cardservice/src/main/resources/application.properties b/cardservice/src/main/resources/application.yml
rename from cardservice/src/main/resources/application.properties
rename to cardservice/src/main/resources/application.yml
--- a/cardservice/src/main/resources/application.properties	(revision a90123374d635c069c80704aa94b0cdb6aacdecd)
+++ b/cardservice/src/main/resources/application.yml	(date 1753984327045)
@@ -1,1 +1,33 @@
-spring.application.name=cardService
+spring:
+  application:
+    name= cardService
+  datasource:
+    driver-class-name: org.h2.Driver
+    url: jdbc:h2:mem:cardDB
+    username: sa
+    password: ""
+  jpa:
+    hibernate:
+      ddl-auto: update
+    database-platform: org.hibernate.dialect.H2Dialect
+  config:
+    import:
+      - "application_prod.yml"
+      - "application_qa.yml"
+  profiles:
+    active: "qa"
+
+server:
+  port: 9000
+
+build:
+  version: "2.0.1"
+
+service:
+  name: muthu-dev
+  contact:
+    mail-id: muthu@gmail.com
+    cabin: A90
+  onCall:
+    - 876543456
+    - 876567865
\ No newline at end of file
Index: cardservice/src/main/java/org/cardservice/CardServiceApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.cardservice;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class CardServiceApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(CardServiceApplication.class, args);\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cardservice/src/main/java/org/cardservice/CardServiceApplication.java b/cardservice/src/main/java/org/cardservice/CardServiceApplication.java
--- a/cardservice/src/main/java/org/cardservice/CardServiceApplication.java	(revision a90123374d635c069c80704aa94b0cdb6aacdecd)
+++ b/cardservice/src/main/java/org/cardservice/CardServiceApplication.java	(date 1753983107805)
@@ -1,13 +1,44 @@
 package org.cardservice;
 
+import io.swagger.v3.oas.annotations.ExternalDocumentation;
+import io.swagger.v3.oas.annotations.OpenAPIDefinition;
+import io.swagger.v3.oas.annotations.info.Contact;
+import io.swagger.v3.oas.annotations.info.Info;
+import io.swagger.v3.oas.annotations.info.License;
+import org.cardservice.DTO.CardsDtDTO;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
 
 @SpringBootApplication
+@EnableJpaAuditing(auditorAwareRef = "cardAuditing")
+@OpenAPIDefinition(
+        info = @Info(
+                title = "card handling service",
+                description = "this service is hand all card reladed operations",
+                version = "/v1",
+                license = @License(
+                        name = "apache 2.0",
+                        url = "https://www.selvafinsrv.com"
+                ),
+                contact=@Contact(
+                        name = "selva",
+                        email = "selva@gmail.com",
+                        url = "https://www.selvafinsrv.com"
+
+                )
+        ),
+        externalDocs =@ExternalDocumentation(
+                url = "https://www.selvafinsrv.com",
+                description = "refer this document for more details"
+        )
+
+)
+@EnableConfigurationProperties(CardsDtDTO.class)
 public class CardServiceApplication {
 
     public static void main(String[] args) {
         SpringApplication.run(CardServiceApplication.class, args);
     }
-
 }
Index: AccountService/src/main/java/org/bankapp/Entity/Account.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.bankapp.Entity;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\n@Getter\n@Setter\n@ToString\n@Entity\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Account extends CommonValue {\n\n    @Column(name=\"customer_id\")\n    private Long customerId;\n\n    @Id\n    @Column(name=\"account_number\")\n    private Long accountNumber;\n\n    @Column(name=\"account_type\")\n    private String accountType;\n\n    @Column(name=\"branch_address\")\n    private String branchAddress;\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AccountService/src/main/java/org/bankapp/Entity/Account.java b/AccountService/src/main/java/org/bankapp/Entity/Account.java
--- a/AccountService/src/main/java/org/bankapp/Entity/Account.java	(revision 26d94f93cc57ebb65e3efdfaf8dc1d09a6eccf04)
+++ b/AccountService/src/main/java/org/bankapp/Entity/Account.java	(date 1753588567991)
@@ -1,15 +1,14 @@
 package org.bankapp.Entity;
 
 import jakarta.persistence.*;
-import lombok.*;
+
 
-@Getter
-@Setter
-@ToString
+
+
 @Entity
-@AllArgsConstructor
-@NoArgsConstructor
 public class Account extends CommonValue {
+    public Account() {
+    }
 
     @Column(name="customer_id")
     private Long customerId;
@@ -24,4 +23,35 @@
     @Column(name="branch_address")
     private String branchAddress;
 
+    public Long getCustomerId() {
+        return customerId;
+    }
+
+    public void setCustomerId(Long customerId) {
+        this.customerId = customerId;
+    }
+
+    public Long getAccountNumber() {
+        return accountNumber;
+    }
+
+    public void setAccountNumber(Long accountNumber) {
+        this.accountNumber = accountNumber;
+    }
+
+    public String getAccountType() {
+        return accountType;
+    }
+
+    public void setAccountType(String accountType) {
+        this.accountType = accountType;
+    }
+
+    public String getBranchAddress() {
+        return branchAddress;
+    }
+
+    public void setBranchAddress(String branchAddress) {
+        this.branchAddress = branchAddress;
+    }
 }
Index: AccountService/src/main/java/org/bankapp/Entity/Customer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.bankapp.Entity;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\n@Getter @Setter @ToString\n@Entity @AllArgsConstructor @NoArgsConstructor\npublic class Customer extends CommonValue {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name=\"customer_id\")\n    private Long customerId;\n    @Column(name=\"customer_name\")\n    private String customerName;\n    @Column(name=\"email\")\n    private String email;\n    @Column(name=\"mobile_number\")\n    private String mobileNumber;\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AccountService/src/main/java/org/bankapp/Entity/Customer.java b/AccountService/src/main/java/org/bankapp/Entity/Customer.java
--- a/AccountService/src/main/java/org/bankapp/Entity/Customer.java	(revision 26d94f93cc57ebb65e3efdfaf8dc1d09a6eccf04)
+++ b/AccountService/src/main/java/org/bankapp/Entity/Customer.java	(date 1753586261810)
@@ -1,21 +1,52 @@
 package org.bankapp.Entity;
 
+
 import jakarta.persistence.*;
-import lombok.*;
 
-@Getter @Setter @ToString
-@Entity @AllArgsConstructor @NoArgsConstructor
+
+@Entity
 public class Customer extends CommonValue {
+    public Customer() {
+    }
 
     @Id
     @GeneratedValue(strategy = GenerationType.IDENTITY)
-    @Column(name="customer_id")
+   // @Column(name="customer_id")
     private Long customerId;
-    @Column(name="customer_name")
+   // @Column(name="customer_name")
     private String customerName;
-    @Column(name="email")
+   // @Column(name="email")
     private String email;
-    @Column(name="mobile_number")
+   // @Column(name="mobile_number")
     private String mobileNumber;
 
+    public Long getCustomerId() {
+        return customerId;
+    }
+
+
+    public String getCustomerName() {
+        return customerName;
+    }
+
+    public void setCustomerName(String customerName) {
+        this.customerName = customerName;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public String getMobileNumber() {
+        return mobileNumber;
+    }
+
+    public void setMobileNumber(String mobileNumber) {
+        this.mobileNumber = mobileNumber;
+    }
+
 }
Index: AccountService/src/main/java/org/bankapp/DTO/ErrorResponseDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.bankapp.DTO;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport org.springframework.http.HttpStatus;\n\nimport java.time.LocalDateTime;\n\n@Data\n@AllArgsConstructor\npublic class ErrorResponseDTO\n{\n\n    public String apiPath;\n    public HttpStatus errorCode;\n    public String errorMessage;\n    public LocalDateTime errorTime;\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AccountService/src/main/java/org/bankapp/DTO/ErrorResponseDTO.java b/AccountService/src/main/java/org/bankapp/DTO/ErrorResponseDTO.java
--- a/AccountService/src/main/java/org/bankapp/DTO/ErrorResponseDTO.java	(revision 26d94f93cc57ebb65e3efdfaf8dc1d09a6eccf04)
+++ b/AccountService/src/main/java/org/bankapp/DTO/ErrorResponseDTO.java	(date 1753588514679)
@@ -1,19 +1,28 @@
 package org.bankapp.DTO;
 
-import lombok.AllArgsConstructor;
-import lombok.Data;
+import io.swagger.v3.oas.annotations.media.Schema;
 import org.springframework.http.HttpStatus;
 
 import java.time.LocalDateTime;
 
-@Data
-@AllArgsConstructor
+
+
+@Schema(name = "ErrorResponse", description = "Schema holds Error details")
 public class ErrorResponseDTO
 {
-
+    @Schema(description = "schema holds api Path")
     public String apiPath;
+    @Schema(description = "schema holds error Code")
     public HttpStatus errorCode;
+    @Schema(description = "schema holds error Message")
     public String errorMessage;
+    @Schema(description = "schema holds error Time")
     public LocalDateTime errorTime;
+    public ErrorResponseDTO(String apiPath, HttpStatus errorCode, String errorMessage, LocalDateTime errorTime) {
+        this.apiPath = apiPath;
+        this.errorCode = errorCode;
+        this.errorMessage = errorMessage;
+        this.errorTime = errorTime;
+    }
 }
 
Index: AccountService/src/main/java/org/bankapp/DTO/AccountDtDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AccountService/src/main/java/org/bankapp/DTO/AccountDtDTO.java b/AccountService/src/main/java/org/bankapp/DTO/AccountDtDTO.java
new file mode 100644
--- /dev/null	(date 1753982235906)
+++ b/AccountService/src/main/java/org/bankapp/DTO/AccountDtDTO.java	(date 1753982235906)
@@ -0,0 +1,11 @@
+package org.bankapp.DTO;
+
+import org.springframework.boot.context.properties.ConfigurationProperties;
+
+import java.util.List;
+import java.util.Map;
+
+@ConfigurationProperties(prefix = "service")
+public record AccountDtDTO(String name, Map<String,String> contact, List<String> OnCall) {
+
+}
Index: AccountService/src/main/java/org/bankapp/DTO/AccountDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.bankapp.DTO;\n\nimport jakarta.validation.constraints.NotNull;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class AccountDTO {\n\n    //@NotNull(message = \"\")\n    //private Long customerId;\n    @NotNull(message = \"invalid account number\")\n    private Long accountNumber;\n    @NotNull(message = \"invalid account Type\")\n    private String accountType;\n    @NotNull(message = \"invalid branch Address\")\n    private String branchAddress;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AccountService/src/main/java/org/bankapp/DTO/AccountDTO.java b/AccountService/src/main/java/org/bankapp/DTO/AccountDTO.java
--- a/AccountService/src/main/java/org/bankapp/DTO/AccountDTO.java	(revision 26d94f93cc57ebb65e3efdfaf8dc1d09a6eccf04)
+++ b/AccountService/src/main/java/org/bankapp/DTO/AccountDTO.java	(date 1753753778385)
@@ -1,21 +1,51 @@
 package org.bankapp.DTO;
 
+import io.swagger.v3.oas.annotations.media.Schema;
 import jakarta.validation.constraints.NotNull;
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
+
 
-@Data
-@AllArgsConstructor
-@NoArgsConstructor
+
+@Schema(name = "Account", description = "Schema is hold Account details" )
+
 public class AccountDTO {
 
+    public AccountDTO() {
+
+    }
+
     //@NotNull(message = "")
     //private Long customerId;
+    @Schema(description = "Schema is hold account Number details", example="10987654356789")
     @NotNull(message = "invalid account number")
     private Long accountNumber;
+    @Schema(description = "Schema is hold account Type details", example="saving Account")
     @NotNull(message = "invalid account Type")
     private String accountType;
+    @Schema(description = "Schema is hold branch Address Type details", example="5/176 ,Namakkal")
     @NotNull(message = "invalid branch Address")
     private String branchAddress;
+
+    public Long getAccountNumber() {
+        return accountNumber;
+    }
+
+    public void setAccountNumber(Long accountNumber) {
+        this.accountNumber = accountNumber;
+    }
+
+    public String getAccountType() {
+        return accountType;
+    }
+
+    public void setAccountType(String accountType) {
+        this.accountType = accountType;
+    }
+
+    public String getBranchAddress() {
+        return branchAddress;
+    }
+
+    public void setBranchAddress(String branchAddress) {
+        this.branchAddress = branchAddress;
+    }
 }
Index: AccountService/src/main/java/org/bankapp/DTO/CustomerDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.bankapp.DTO;\n\n\nimport jakarta.validation.Valid;\nimport jakarta.validation.constraints.Email;\nimport jakarta.validation.constraints.NotEmpty;\nimport jakarta.validation.constraints.Pattern;\nimport jakarta.validation.constraints.Size;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Valid\npublic class CustomerDTO {\n\n    @NotEmpty(message = \"enter email\")\n    @Size(min = 3,max = 25)\n    private String customerName;\n    @NotEmpty(message = \"enter email\")\n    @Email(message = \"invalid email id\")\n    private String email;\n    @NotEmpty(message = \"enter mobile number\")\n   // @Pattern(regexp =\"\")\n    private String mobileNumber;\n  //  @NotEmpty(message = \"enter account details\")\n    private AccountDTO accountDTO;\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AccountService/src/main/java/org/bankapp/DTO/CustomerDTO.java b/AccountService/src/main/java/org/bankapp/DTO/CustomerDTO.java
--- a/AccountService/src/main/java/org/bankapp/DTO/CustomerDTO.java	(revision 26d94f93cc57ebb65e3efdfaf8dc1d09a6eccf04)
+++ b/AccountService/src/main/java/org/bankapp/DTO/CustomerDTO.java	(date 1753588496627)
@@ -1,31 +1,66 @@
 package org.bankapp.DTO;
 
 
+import io.swagger.v3.oas.annotations.media.Schema;
 import jakarta.validation.Valid;
 import jakarta.validation.constraints.Email;
 import jakarta.validation.constraints.NotEmpty;
-import jakarta.validation.constraints.Pattern;
 import jakarta.validation.constraints.Size;
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
+
 
-@Data
-@AllArgsConstructor
-@NoArgsConstructor
+
 @Valid
+@Schema(name = "Customer", description = "Schema is hold Customer and Account details" )
 public class CustomerDTO {
 
+    public CustomerDTO() {
+    }
+
+    @Schema(description = "Schema holds customer name", example = "selva")
     @NotEmpty(message = "enter email")
     @Size(min = 3,max = 25)
     private String customerName;
+    @Schema(description = "Schema holds Email ID", example = "selva@gmail.com")
     @NotEmpty(message = "enter email")
     @Email(message = "invalid email id")
     private String email;
+    @Schema(description = "Schema holds mobile number", example = "9597726473")
     @NotEmpty(message = "enter mobile number")
    // @Pattern(regexp ="")
     private String mobileNumber;
+    @Schema(description = "Schema holds account details")
   //  @NotEmpty(message = "enter account details")
     private AccountDTO accountDTO;
 
+    public String getCustomerName() {
+        return customerName;
+    }
+
+    public void setCustomerName(String customerName) {
+        this.customerName = customerName;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public String getMobileNumber() {
+        return mobileNumber;
+    }
+
+    public void setMobileNumber(String mobileNumber) {
+        this.mobileNumber = mobileNumber;
+    }
+
+    public AccountDTO getAccountDTO() {
+        return accountDTO;
+    }
+
+    public void setAccountDTO(AccountDTO accountDTO) {
+        this.accountDTO = accountDTO;
+    }
 }
Index: AccountService/src/main/java/org/bankapp/BankAppApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.bankapp;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.data.jpa.repository.config.EnableJpaAuditing;\n\n@SpringBootApplication\n@EnableJpaAuditing(auditorAwareRef = \"Auditing\")\npublic class BankAppApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(BankAppApplication.class, args);\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AccountService/src/main/java/org/bankapp/BankAppApplication.java b/AccountService/src/main/java/org/bankapp/BankAppApplication.java
--- a/AccountService/src/main/java/org/bankapp/BankAppApplication.java	(revision 26d94f93cc57ebb65e3efdfaf8dc1d09a6eccf04)
+++ b/AccountService/src/main/java/org/bankapp/BankAppApplication.java	(date 1753802534373)
@@ -1,11 +1,28 @@
 package org.bankapp;
 
+import io.swagger.v3.oas.annotations.OpenAPIDefinition;
+import io.swagger.v3.oas.annotations.info.Contact;
+import io.swagger.v3.oas.annotations.info.Info;
+import io.swagger.v3.oas.annotations.info.License;
+import org.bankapp.DTO.AccountDtDTO;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
 
 @SpringBootApplication
+@EnableConfigurationProperties(AccountDtDTO.class)
 @EnableJpaAuditing(auditorAwareRef = "Auditing")
+@OpenAPIDefinition(
+        info = @Info(
+                title = "Selva finance service",
+                description = "this app developed by small finance service",
+                version = "/v1",
+                contact =@Contact(name="selva", url = "https://www.selvafinser.com", email = "selvafinsrv@gmail.com"),
+                license = @License(name = "Apache 2.0", url = "https://www.selvafinser.com")
+        )
+
+)
 public class BankAppApplication {
 
     public static void main(String[] args) {
Index: AccountService/src/main/java/org/bankapp/DTO/ResponseDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.bankapp.DTO;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport org.springframework.http.HttpStatus;\n\n@Data\n@AllArgsConstructor\npublic class ResponseDTO {\n\n    public String responseCode;\n    public String responseMessage;\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AccountService/src/main/java/org/bankapp/DTO/ResponseDTO.java b/AccountService/src/main/java/org/bankapp/DTO/ResponseDTO.java
--- a/AccountService/src/main/java/org/bankapp/DTO/ResponseDTO.java	(revision 26d94f93cc57ebb65e3efdfaf8dc1d09a6eccf04)
+++ b/AccountService/src/main/java/org/bankapp/DTO/ResponseDTO.java	(date 1753586332041)
@@ -1,14 +1,18 @@
 package org.bankapp.DTO;
 
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import org.springframework.http.HttpStatus;
+import io.swagger.v3.oas.annotations.media.Schema;
 
-@Data
-@AllArgsConstructor
+
+@Schema(name = "Response", description = "Schema holds Response details")
 public class ResponseDTO {
 
+    @Schema(description = "schema holds response code", example = "200")
     public String responseCode;
+    @Schema(description = "schema holds response Message", example=" API response")
     public String responseMessage;
 
+    public ResponseDTO(String responseCode, String responseMessage) {
+        this.responseCode = responseCode;
+        this.responseMessage = responseMessage;
+    }
 }
Index: AccountService/src/main/java/org/bankapp/service/Impl/AccountService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.bankapp.service.Impl;\n\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.bankapp.DTO.AccountDTO;\nimport org.bankapp.DTO.CustomerDTO;\nimport org.bankapp.Entity.Account;\nimport org.bankapp.Entity.Customer;\nimport org.bankapp.Exception.CustomeException.CustomerAvailableException;\nimport org.bankapp.Exception.CustomeException.ResourceNotFoundException;\nimport org.bankapp.Mapper.AccountMapper;\nimport org.bankapp.Mapper.CustomerMapper;\nimport org.bankapp.Repository.AccountRepository;\nimport org.bankapp.Repository.CustomerRepository;\nimport org.bankapp.constant.Constant;\nimport org.bankapp.service.iAccountService;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.Optional;\nimport java.util.Random;\n\n@Slf4j\n@Service\n@AllArgsConstructor\npublic class AccountService implements iAccountService {\n\n    private AccountRepository accountRepository;\n    private CustomerRepository customerRepository;\n\n    @Override\n    public void CreateAccount(CustomerDTO customerDTO){\n        Customer customer= CustomerMapper.mapTOCustomer(customerDTO,new Customer());\n       // log.info(\"Creating account for customer \"+customer);\n        Optional<Customer> optional=customerRepository.findByMobileNumber(customerDTO.getMobileNumber());\n        if(optional.isPresent()) {\n            throw new CustomerAvailableException(\"this Mobile number already available \"+customerDTO.getMobileNumber());\n        }\n        //customer.setCreatedAt(LocalDateTime.now());\n        //customer.setCreatedBy(\"Anonymous\");\n        Customer savedCustomer=customerRepository.save(customer);\n        accountRepository.save(CreateNewAccount(savedCustomer));\n\n    }\n\n    private Account CreateNewAccount(Customer customer) {\n        Account account=new Account();\n        account.setCustomerId(customer.getCustomerId());\n        Long AccountNumber=1000000000L+new Random().nextInt(900000000);\n        account.setAccountNumber(AccountNumber);\n        account.setAccountType(Constant.ACCOUNT_TYPE);\n        account.setBranchAddress(Constant.Branch_Address);\n       // account.setCreatedAt(LocalDateTime.now());\n        //account.setCreatedBy(\"Anonymous\");\n        return account;\n    }\n    @Override\n    public CustomerDTO fetchAccount(String mobileNumber){\n\n        Customer customer=customerRepository.findByMobileNumber(mobileNumber)\n                .orElseThrow( ()-> new ResourceNotFoundException(\"customer\",\"mobileNumber\",mobileNumber));\n\n        Account account=accountRepository.findByCustomerId(customer.getCustomerId())\n                .orElseThrow( ()-> new ResourceNotFoundException(\"Account\",\"CustomerId\",customer.getCustomerId().toString()));\n\n        CustomerDTO customerDTO=CustomerMapper.mapTOCustomerDTO(customer,new CustomerDTO());\n        customerDTO.setAccountDTO(AccountMapper.mapToAccountDTO(account,new AccountDTO()));\n        return customerDTO;\n    }\n\n    @Override\n    public boolean updateAccountDetails(CustomerDTO customerDTO) {\n       boolean isUpdate=false;\n       AccountDTO accountDTO=customerDTO.getAccountDTO();\n       if (accountDTO != null){\n           Account account=accountRepository.findById(accountDTO.getAccountNumber())\n                   .orElseThrow( ()-> new ResourceNotFoundException(\"Account\",\"AccountNumber\",accountDTO.getAccountNumber().toString()));\n\n           AccountMapper.mapToAccount(accountDTO,account);\n           accountRepository.save(account);\n           Customer customer=customerRepository.findById(account.getCustomerId())\n                   .orElseThrow( ()-> new ResourceNotFoundException(\"Customer\",\"CustomerId\",account.getCustomerId().toString()));\n\n           CustomerMapper.mapTOCustomer(customerDTO,customer);\n           customerRepository.save(customer);\n           isUpdate=true;\n       }\n       return isUpdate;\n    }\n\n    @Override\n    public void removeAccount(String mobileNumber) {\n        Customer customer=customerRepository.findByMobileNumber(mobileNumber)\n                .orElseThrow( ()-> new ResourceNotFoundException(\"customer\",\"mobileNumber\",mobileNumber));\n        accountRepository.deleteByCustomerId(customer.getCustomerId());\n        customerRepository.delete(customer);\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AccountService/src/main/java/org/bankapp/service/Impl/AccountService.java b/AccountService/src/main/java/org/bankapp/service/Impl/AccountService.java
--- a/AccountService/src/main/java/org/bankapp/service/Impl/AccountService.java	(revision 26d94f93cc57ebb65e3efdfaf8dc1d09a6eccf04)
+++ b/AccountService/src/main/java/org/bankapp/service/Impl/AccountService.java	(date 1753616360220)
@@ -1,7 +1,6 @@
 package org.bankapp.service.Impl;
 
-import lombok.AllArgsConstructor;
-import lombok.extern.slf4j.Slf4j;
+
 import org.bankapp.DTO.AccountDTO;
 import org.bankapp.DTO.CustomerDTO;
 import org.bankapp.Entity.Account;
@@ -20,13 +19,18 @@
 import java.util.Optional;
 import java.util.Random;
 
-@Slf4j
+
 @Service
-@AllArgsConstructor
+
 public class AccountService implements iAccountService {
 
-    private AccountRepository accountRepository;
-    private CustomerRepository customerRepository;
+    private final AccountRepository accountRepository;
+    private final CustomerRepository customerRepository;
+
+    public AccountService(AccountRepository accountRepository, CustomerRepository customerRepository) {
+        this.accountRepository = accountRepository;
+        this.customerRepository = customerRepository;
+    }
 
     @Override
     public void CreateAccount(CustomerDTO customerDTO){
Index: cardservice/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>3.5.3</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>Org.cardService</groupId>\n    <artifactId>cardService</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>cardService</name>\n    <description>cardService</description>\n    <url/>\n    <licenses>\n        <license/>\n    </licenses>\n    <developers>\n        <developer/>\n    </developers>\n    <scm>\n        <connection/>\n        <developerConnection/>\n        <tag/>\n        <url/>\n    </scm>\n    <properties>\n        <java.version>17</java.version>\n        <spring-ai.version>1.0.0</spring-ai.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.ai</groupId>\n            <artifactId>spring-ai-starter-model-openai</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>com.h2database</groupId>\n            <artifactId>h2</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>com.mysql</groupId>\n            <artifactId>mysql-connector-j</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.restdocs</groupId>\n            <artifactId>spring-restdocs-mockmvc</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.ai</groupId>\n                <artifactId>spring-ai-bom</artifactId>\n                <version>${spring-ai.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </path>\n                    </annotationProcessorPaths>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.asciidoctor</groupId>\n                <artifactId>asciidoctor-maven-plugin</artifactId>\n                <version>2.2.1</version>\n                <executions>\n                    <execution>\n                        <id>generate-docs</id>\n                        <phase>prepare-package</phase>\n                        <goals>\n                            <goal>process-asciidoc</goal>\n                        </goals>\n                        <configuration>\n                            <backend>html</backend>\n                            <doctype>book</doctype>\n                        </configuration>\n                    </execution>\n                </executions>\n                <dependencies>\n                    <dependency>\n                        <groupId>org.springframework.restdocs</groupId>\n                        <artifactId>spring-restdocs-asciidoctor</artifactId>\n                        <version>${spring-restdocs.version}</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cardservice/pom.xml b/cardservice/pom.xml
--- a/cardservice/pom.xml	(revision a90123374d635c069c80704aa94b0cdb6aacdecd)
+++ b/cardservice/pom.xml	(date 1753633027867)
@@ -8,11 +8,12 @@
         <version>3.5.3</version>
         <relativePath/> <!-- lookup parent from repository -->
     </parent>
-    <groupId>Org.cardService</groupId>
-    <artifactId>cardService</artifactId>
+    <groupId>Org.cardservice</groupId>
+    <artifactId>cardservice</artifactId>
     <version>0.0.1-SNAPSHOT</version>
-    <name>cardService</name>
-    <description>cardService</description>
+    <name>cardservice</name>
+    <packaging>jar</packaging>
+    <description>card service</description>
     <url/>
     <licenses>
         <license/>
@@ -40,16 +41,21 @@
             <artifactId>spring-boot-starter-web</artifactId>
         </dependency>
         <dependency>
-            <groupId>org.springframework.ai</groupId>
-            <artifactId>spring-ai-starter-model-openai</artifactId>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-validation</artifactId>
         </dependency>
-
         <dependency>
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-devtools</artifactId>
             <scope>runtime</scope>
             <optional>true</optional>
         </dependency>
+        <dependency>
+            <groupId>org.springdoc</groupId>
+            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
+            <version>2.8.9</version>
+        </dependency>
+
         <dependency>
             <groupId>com.h2database</groupId>
             <artifactId>h2</artifactId>
@@ -71,9 +77,8 @@
             <scope>test</scope>
         </dependency>
         <dependency>
-            <groupId>org.springframework.restdocs</groupId>
-            <artifactId>spring-restdocs-mockmvc</artifactId>
-            <scope>test</scope>
+            <groupId>jakarta.validation</groupId>
+            <artifactId>jakarta.validation-api</artifactId>
         </dependency>
     </dependencies>
     <dependencyManagement>
@@ -87,13 +92,13 @@
             </dependency>
         </dependencies>
     </dependencyManagement>
-
     <build>
         <plugins>
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-compiler-plugin</artifactId>
                 <configuration>
+
                     <annotationProcessorPaths>
                         <path>
                             <groupId>org.projectlombok</groupId>
@@ -119,18 +124,14 @@
                         </configuration>
                     </execution>
                 </executions>
-                <dependencies>
-                    <dependency>
-                        <groupId>org.springframework.restdocs</groupId>
-                        <artifactId>spring-restdocs-asciidoctor</artifactId>
-                        <version>${spring-restdocs.version}</version>
-                    </dependency>
-                </dependencies>
             </plugin>
             <plugin>
                 <groupId>org.springframework.boot</groupId>
                 <artifactId>spring-boot-maven-plugin</artifactId>
                 <configuration>
+                    <image>
+                        <name>selva2404/${project.artifactId}:s1</name>
+                    </image>
                     <excludes>
                         <exclude>
                             <groupId>org.projectlombok</groupId>
@@ -141,5 +142,4 @@
             </plugin>
         </plugins>
     </build>
-
 </project>
Index: AccountService/src/main/java/org/bankapp/Entity/CommonValue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.bankapp.Entity;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.EntityListeners;\nimport jakarta.persistence.MappedSuperclass;\nimport lombok.Data;\nimport org.springframework.data.annotation.CreatedBy;\nimport org.springframework.data.annotation.CreatedDate;\nimport org.springframework.data.annotation.LastModifiedBy;\nimport org.springframework.data.annotation.LastModifiedDate;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.time.LocalDateTime;\n\n@MappedSuperclass\n@EntityListeners(AuditingEntityListener.class)\n@Data\npublic class CommonValue {\n\n    @CreatedDate\n    @Column(updatable = false)\n    private LocalDateTime CreatedAt;\n\n    @CreatedBy\n    @Column(updatable = false)\n    private String CreatedBy;\n\n    @LastModifiedDate\n    @Column(insertable = false)\n    private LocalDateTime UpdatedAt;\n\n    @LastModifiedBy\n    @Column(insertable = false)\n    private String UpdatedBy;\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AccountService/src/main/java/org/bankapp/Entity/CommonValue.java b/AccountService/src/main/java/org/bankapp/Entity/CommonValue.java
--- a/AccountService/src/main/java/org/bankapp/Entity/CommonValue.java	(revision 26d94f93cc57ebb65e3efdfaf8dc1d09a6eccf04)
+++ b/AccountService/src/main/java/org/bankapp/Entity/CommonValue.java	(date 1753588567981)
@@ -3,7 +3,7 @@
 import jakarta.persistence.Column;
 import jakarta.persistence.EntityListeners;
 import jakarta.persistence.MappedSuperclass;
-import lombok.Data;
+
 import org.springframework.data.annotation.CreatedBy;
 import org.springframework.data.annotation.CreatedDate;
 import org.springframework.data.annotation.LastModifiedBy;
@@ -14,9 +14,12 @@
 
 @MappedSuperclass
 @EntityListeners(AuditingEntityListener.class)
-@Data
+
 public class CommonValue {
 
+    public CommonValue() {
+    }
+
     @CreatedDate
     @Column(updatable = false)
     private LocalDateTime CreatedAt;
@@ -33,4 +36,35 @@
     @Column(insertable = false)
     private String UpdatedBy;
 
+    public LocalDateTime getCreatedAt() {
+        return CreatedAt;
+    }
+
+    public void setCreatedAt(LocalDateTime createdAt) {
+        CreatedAt = createdAt;
+    }
+
+    public String getCreatedBy() {
+        return CreatedBy;
+    }
+
+    public void setCreatedBy(String createdBy) {
+        CreatedBy = createdBy;
+    }
+
+    public LocalDateTime getUpdatedAt() {
+        return UpdatedAt;
+    }
+
+    public void setUpdatedAt(LocalDateTime updatedAt) {
+        UpdatedAt = updatedAt;
+    }
+
+    public String getUpdatedBy() {
+        return UpdatedBy;
+    }
+
+    public void setUpdatedBy(String updatedBy) {
+        UpdatedBy = updatedBy;
+    }
 }
